# Ime pipeline-a za frontend
name: Frontend CI

# Dogodki, ki sprožijo workflow (push in pull request na glavno vejo)
on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production

jobs:
  # Job za gradnjo frontenda
  build-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: frontend/node_modules  # Pot do mape node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}  # Ključ za cache
        restore-keys: |
          ${{ runner.os }}-frontend-
      # ⚠️ Caching:
      # - Če cache obstaja (cache hit), se node_modules obnovi, preden se zažene npm install.
      # - Če cache ne obstaja (cache miss), npm install ponovno ustvari mapo node_modules.

    - name: Install dependencies  # Namestitev odvisnosti
      run: |
        cd frontend
        npm ci

    - name: Build frontend  # Gradnja frontenda
      run: |
        cd frontend
        npm run build

    - name: Upload frontend artifacts  # Naložitev artefaktov za frontend
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build  # Ime artefakta
        path: frontend/out/  
        # Pot do celotne kode
        # Nameščene odvisnosti

  # Job za testiranje frontend
  test-frontend:
    needs: build-frontend  # Testiranje se izvede po uspešni gradnji
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: frontend/node_modules  # Pot do mape node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}  # Ključ za cache
        restore-keys: |
          ${{ runner.os }}-frontend-

    - name: Install dependencies  # Namestitev odvisnosti
      run: |
        cd frontend
        npm install
      # ⚠️ Cache hit:
      # - Če je cache hit, npm install preveri obstoječe odvisnosti in ne namešča ničesar dodatnega.
      # - Če je cache miss, npm install ponovno ustvari mapo node_modules.

    - name: Run tests with coverage  # Izvajanje testov s pokritostjo
      run: |
        cd frontend
        npm run test:ci

    - name: Upload coverage report  # Naložitev poročila o pokritosti kode
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage  # Ime artefakta
        path: frontend/coverage/  # Pot do poročila o pokritosti kode

  # Gradnja Docker slike in nalaganje na Docker Hub - Development
  dockerize-and-push-dev:
    needs: test-frontend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' 
    environment: 
      name: Development
    

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:dev ./frontend
        docker tag ${{ secrets.DOCKER_USERNAME }}/frontend:dev ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend:dev
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

  # Job za SonarQube skeniranje
  sonarcloud-analysis:
    needs: test-frontend
    runs-on: ubuntu-latest 
    if: github.ref == 'refs/heads/main'
    environment:
      name: Development   

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          cd ../backend
          npm ci

      - name: Run tests and collect coverage (Frontend)
        run: |
          cd frontend
          npm run test:ci -- --coverage
          cp coverage/lcov.info ../frontend-lcov.info
        env:
          CI: true

      - name: Run tests and collect coverage (Backend)
        run: |
          cd backend
          npm run test:ci
          cp coverage/lcov.info ../backend-lcov.info
        env:
          CI: true

      - name: Debug LCOV Files
        run: |
          echo "Frontend LCOV:"
          cat frontend-lcov.info
          echo "Backend LCOV:"
          cat backend-lcov.info

      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.ORGANIZATION_KEY }} \
            -Dsonar.sources=frontend/src/app/components/transactions,backend/src \
            -Dsonar.inclusions=frontend/src/app/components/transactions/category.tsx,frontend/src/app/components/transactions/newTransaction.tsx,frontend/src/app/components/transactions/transactionDetails.tsx,backend/src/category.js,backend/src/transactions.js \
            -Dsonar.exclusions=coverage/**,node_modules/**,.next/**,**/*.test.{js,jsx,ts,tsx} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.javascript.lcov.reportPaths=frontend-lcov.info,backend-lcov.info

            
  # Gradnja Docker slike in nalaganje na Docker Hub - Production
  dockerize-and-push-prod:
    needs: [test-frontend, sonarcloud-analysis]
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/production' 

    environment:
      name: Production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check SonarCloud Quality Gate
        run: |
          curl -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/project_badges/measure?project=${{ secrets.PROJECT_KEY }}&metric=alert_status" | grep -q "OK" || exit 1


      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:prod ./frontend
          docker tag ${{ secrets.DOCKER_USERNAME }}/frontend:prod ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:prod
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

  # Job za deploy na Firebase Hosting
  deploy-to-firebase:
    needs: test-frontend 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifact  
        uses: actions/download-artifact@v4
        with:
          name: frontend-build  
          path: frontend/out/ 

      - name: Setup Firebase CLI  
        run: |
          cd frontend
          npm install -g firebase-tools

      - name: Deploy to Firebase Hosting 
        run: |
          cd frontend
          firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }}

  deploy-pages:
    needs: test-frontend
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
