# Ime pipeline-a za backend
name: Backend CI

# Dogodki, ki sprožijo workflow (push in pull request na glavno vejo))
on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production

jobs:
  # Job za gradnjo backenda
  build-backend:
    runs-on: ubuntu-latest 

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: backend/node_modules  # Pot do mape node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}  # Ključ za cache
        restore-keys: |
          ${{ runner.os }}-backend-
      # ⚠️ Caching:
      # - Če cache obstaja (cache hit), se node_modules obnovi, preden se zažene npm install.
      # - Če cache ne obstaja (cache miss), npm install ponovno ustvari mapo node_modules.

    - name: Install dependencies  # Namestitev odvisnosti
      run: |
        cd backend
        npm ci

    - name: Upload backend artifacts  # Naložitev artefaktov za backend
      uses: actions/upload-artifact@v4
      with:
        name: backend-build  # Ime artefakta
        path: |
          backend/
          backend/node_modules/  
        # Pot do celotne kode
        # Nameščene odvisnosti

  # Job za testiranje backenda
  test-backend:
    needs: build-backend  # Testiranje se izvede po uspešni gradnji
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: backend/node_modules  # Pot do mape node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}  # Ključ za cache
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install dependencies  # Namestitev odvisnosti
      run: |
        cd backend
        npm install
      # ⚠️ Cache hit:
      # - Če je cache hit, npm install preveri obstoječe odvisnosti in ne namešča ničesar dodatnega.
      # - Če je cache miss, npm install ponovno ustvari mapo node_modules.

    - name: Run tests with coverage  # Izvajanje testov s pokritostjo
      run: |
        cd backend
        npm run test:ci

    - name: Upload coverage report  # Naložitev poročila o pokritosti kode
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage  # Ime artefakta
        path: backend/coverage/  # Pot do poročila o pokritosti kode

  # Gradnja Docker slike in nalaganje na Docker Hub - Development
  dockerize-and-push-dev:
    needs: test-backend  # Izvede se po uspešnem testiranju
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: 
      name: Development
    

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:dev ./backend
        docker tag ${{ secrets.DOCKER_USERNAME }}/backend:dev ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:dev
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

  # Job za SonarQube skeniranje
  sonarcloud-analysis:
    needs: test-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: Development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          cd ../backend
          npm ci

      - name: Run tests and collect coverage (Frontend)
        run: |
          cd frontend
          npm run test:ci -- --coverage
          cp coverage/lcov.info ../frontend-lcov.info
        env:
          CI: true

      - name: Run tests and collect coverage (Backend)
        run: |
          cd backend
          npm run test:ci
          cp coverage/lcov.info ../backend-lcov.info
        env:
          CI: true

      - name: Debug LCOV Files
        run: |
          echo "Frontend LCOV:"
          cat frontend-lcov.info
          echo "Backend LCOV:"
          cat backend-lcov.info

      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.ORGANIZATION_KEY }} \
            -Dsonar.sources=frontend/src/app/components/transactions,backend/src \
            -Dsonar.inclusions=frontend/src/app/components/transactions/category.tsx,frontend/src/app/components/transactions/newTransaction.tsx,frontend/src/app/components/transactions/transactionDetails.tsx,backend/src/category.js,backend/src/transactions.js \
            -Dsonar.exclusions=coverage/**,node_modules/**,.next/**,**/*.test.{js,jsx,ts,tsx} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.javascript.lcov.reportPaths=frontend-lcov.info,backend-lcov.info


  # Gradnja Docker slike in nalaganje na Docker Hub - Production
  dockerize-and-push-prod:
    needs: [test-backend, sonarcloud-analysis]  # Izvede se po uspešnem testiranju
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/production' 

    environment:
      name: Production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:prod ./backend
        docker tag ${{ secrets.DOCKER_USERNAME }}/backend:prod ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:prod
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

  # Job za deploy na Heroku
  deploy-to-heroku:
    needs: test-backend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/

    - name: Set up Heroku remote
      run: |
        git remote add heroku https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git
        git fetch heroku
  
    - name: Deploy backend to Heroku
      run: |
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD) 
        git checkout $CURRENT_BRANCH
        git subtree split --prefix backend -b deploy-branch
        git push -f heroku deploy-branch:main
        git branch -D deploy-branch
